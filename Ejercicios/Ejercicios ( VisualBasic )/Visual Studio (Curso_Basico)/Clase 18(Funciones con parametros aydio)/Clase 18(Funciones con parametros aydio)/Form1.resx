<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        9zrJ0QAAAABJRU5ErkJggg==
</value>
  </data>
</root>